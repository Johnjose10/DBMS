Microsoft Windows [Version 10.0.19045.4170]
(c) Microsoft Corporation. All rights reserved.

C:\Users\mlm>mongod --version
db version v7.0.6
Build Info: {
    "version": "7.0.6",
    "gitVersion": "66cdc1f28172cb33ff68263050d73d4ade73b9a4",
    "modules": [],
    "allocator": "tcmalloc",
    "environment": {
        "distmod": "windows",
        "distarch": "x86_64",
        "target_arch": "x86_64"
    }
}

C:\Users\mlm>mongosh
Current Mongosh Log ID: 65f7ef1b87de393de28bf201
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.2.0
Using MongoDB:          7.0.6
Using Mongosh:          2.2.0

For mongosh info see: https://docs.mongodb.com/mongodb-shell/


To help improve our products, anonymous usage data is collected and sent to MongoDB periodically (https://www.mongodb.com/legal/privacy-policy).
You can opt-out by running the disableTelemetry() command.

------
   The server generated these startup warnings when booting
   2024-03-18T11:33:20.720+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

test> show dbs
admin   40.00 KiB
config  60.00 KiB
local   72.00 KiB
test> use student
switched to db student
student> show dbs
admin   40.00 KiB
config  92.00 KiB
local   72.00 KiB
student> db.dbms.insertone({"rollno":,"name":"john"})
Uncaught:
SyntaxError: Unexpected token (1:28)

> 1 | db.dbms.insertone({"rollno":,"name":"john"})
    |                             ^
  2 |

student> db.dbms.insertOne({"rollno":,"name":"john"})
Uncaught:
SyntaxError: Unexpected token (1:28)

> 1 | db.dbms.insertOne({"rollno":,"name":"john"})
    |                             ^
  2 |

student> db.createCollection("dbms")
{ ok: 1 }
student> show dbs
admin     40.00 KiB
config   108.00 KiB
local     72.00 KiB
student    8.00 KiB
student> db.dbms.insertOne({"rollno":,"name":"john"})
Uncaught:
SyntaxError: Unexpected token (1:28)

> 1 | db.dbms.insertOne({"rollno":,"name":"john"})
    |                             ^
  2 |

student> db.dbms.insertOne({"rollno":1,"name":"john"})
{
  acknowledged: true,
  insertedId: ObjectId('65f7f44687de393de28bf202')
}
student> db.dbms.insertOne({"rollno":2,"name":"nandhu"})
{
  acknowledged: true,
  insertedId: ObjectId('65f7f46e87de393de28bf203')
}
student> db.dbms.insertOne({"rollno":3,"name":"hebel"})
{
  acknowledged: true,
  insertedId: ObjectId('65f7f4b087de393de28bf204')
}
student> db.dbms.updateOne({rollno:1},{$set:{name:"anandhu"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
student> db.dbms.drop()
true
student> show collections

student> db.dropDatabase()
{ ok: 1, dropped: 'student' }
student>
